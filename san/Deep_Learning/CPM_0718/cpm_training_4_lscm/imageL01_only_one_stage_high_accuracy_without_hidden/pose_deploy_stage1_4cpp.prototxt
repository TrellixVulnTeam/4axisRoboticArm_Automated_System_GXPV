#input: "data"
#input_dim: 1
#input_dim: 3
#input_dim: 368
#input_dim: 368

# zx, for testing each image, using MemoryData layer, begin
# because the memorydata layer existing implementation only supports one scale for each image, in order to handle each image with multiple scales,
# we preprocess each image including scale, mean substraction, and crop, outside the memorydata layer.
# the memorydata layer only need to receive each image and forward propagate each image to infer it.
name: "capacitor_net"
layer {
  name: "capacitor_net_data"
  type: "MemoryData"
  top: "data"
  top: "dummy_blob"    # dummy_blob has nothing to do, just as its name.
  include {
    phase: TEST
  }
  # zx, all pre-processing have been implemented in the test examplar file.
  # Since this layer cannot handle the case of each image with multiple scales.
  #transform_param {
  #  scale: 0.3271        # one of scales
  #  mean_value: 0.5
  #  mean_value: 0.5
  #  mean_value: 0.5
  #}
  memory_data_param {
    batch_size: 1
    channels: 3
    height: 368
    width: 368
  }
}
# zx, end
layer {
  name: "conv1_stage1"
  type: "Convolution"
  bottom: "data"
  top: "conv1_stage1"
  param {
    lr_mult: 5
    decay_mult: 1
  }
  param {
    lr_mult: 10
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 4
    kernel_size: 9
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1_stage1"
  type: "ReLU"
  bottom: "conv1_stage1"
  top: "conv1_stage1"
}
layer {
  name: "pool1_stage1"
  type: "Pooling"
  bottom: "conv1_stage1"
  top: "pool1_stage1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv2_stage1"
  type: "Convolution"
  bottom: "pool1_stage1"
  top: "conv2_stage1"
  param {
    lr_mult: 5
    decay_mult: 1
  }
  param {
    lr_mult: 10
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 4
    kernel_size: 9
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2_stage1"
  type: "ReLU"
  bottom: "conv2_stage1"
  top: "conv2_stage1"
}
layer {
  name: "pool2_stage1"
  type: "Pooling"
  bottom: "conv2_stage1"
  top: "pool2_stage1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv3_stage1"
  type: "Convolution"
  bottom: "pool2_stage1"
  top: "conv3_stage1"
  param {
    lr_mult: 5
    decay_mult: 1
  }
  param {
    lr_mult: 10
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 4
    kernel_size: 9
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3_stage1"
  type: "ReLU"
  bottom: "conv3_stage1"
  top: "conv3_stage1"
}
layer {
  name: "pool3_stage1"
  type: "Pooling"
  bottom: "conv3_stage1"
  top: "pool3_stage1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv4_stage1"
  type: "Convolution"
  bottom: "pool3_stage1"
  top: "conv4_stage1"
  param {
    lr_mult: 5
    decay_mult: 1
  }
  param {
    lr_mult: 10
    decay_mult: 0
  }
  convolution_param {
    num_output: 32
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu4_stage1"
  type: "ReLU"
  bottom: "conv4_stage1"
  top: "conv4_stage1"
}
layer {
  name: "conv5_stage1"
  type: "Convolution"
  bottom: "conv4_stage1"
  top: "conv5_stage1"
  param {
    lr_mult: 5
    decay_mult: 1
  }
  param {
    lr_mult: 10
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 4
    kernel_size: 9
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu5_stage1"
  type: "ReLU"
  bottom: "conv5_stage1"
  top: "conv5_stage1"
}
layer {
  name: "conv6_stage1"
  type: "Convolution"
  bottom: "conv5_stage1"
  top: "conv6_stage1"
  param {
    lr_mult: 5
    decay_mult: 1
  }
  param {
    lr_mult: 10
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 0
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu6_stage1"
  type: "ReLU"
  bottom: "conv6_stage1"
  top: "conv6_stage1"
}
layer {
  name: "Fconv7_stage1"
  type: "Convolution"
  bottom: "conv6_stage1"
  top: "Fconv7_stage1"
  param {
    lr_mult: 5
    decay_mult: 1
  }
  param {
    lr_mult: 10
    decay_mult: 0
  }
  convolution_param {
    num_output: 8
    pad: 0
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
